import os
import datetime
import psutil
import glob
import tkinter as tk
from tkinter import simpledialog
from gtts import gTTS
import pygame
import tempfile
import json
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è pygame –¥–ª—è –∑–≤—É–∫—É
pygame.init()
pygame.mixer.init()

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
memory_file = "memory.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –∑ —Ñ–∞–π–ª—É
def load_memory():
    if os.path.exists(memory_file):
        with open(memory_file, "r") as f:
            return json.load(f)
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –≤ —Ñ–∞–π–ª
def save_memory(memory):
    with open(memory_file, "w") as f:
        json.dump(memory, f)

# –ü–∞–º'—è—Ç—å –î–∂–∞—Ä–≤—ñ—Å–∞
memory = load_memory()

# –ü—Ä–∏–∫–ª–∞–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–æ –ø–∞–º'—è—Ç—ñ
def add_to_memory(key, value):
    memory[key] = value
    save_memory(memory)

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
def recall_from_memory(key):
    return memory.get(key, "–Ø –Ω–µ –ø–∞–º'—è—Ç–∞—é.")

# –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥
def speak(text):
    print(f"Jarvis: {text}")
    tts = gTTS(text=text, lang='uk')
    with tempfile.NamedTemporaryFile(delete=True, suffix=".mp3") as fp:
        tts.save(fp.name)
        pygame.mixer.music.load(fp.name)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            continue

# –ü–æ—à—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º
def find_installed_programs():
    search_dirs = ["C:\\Program Files", "C:\\Program Files (x86)", "C:\\Users", "D:\\"]
    programs = {}
    for dir_path in search_dirs:
        for path in glob.glob(dir_path + "/**/*.exe", recursive=True):
            name = os.path.splitext(os.path.basename(path))[0].lower()
            programs[name] = path
    return programs

installed_programs = find_installed_programs()

# –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
training_data = [
    ("–ü—Ä–∏–≤—ñ—Ç", "greeting"),
    ("–Ø–∫ —Å–ø—Ä–∞–≤–∏?", "question"),
    ("–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "question"),
    ("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è", "goodbye"),
    ("–í–∏–π—Ç–∏", "exit"),
    ("–ß–∞—Å", "time"),
    ("–ë–∞—Ç–∞—Ä–µ—è", "battery")
]

texts, labels = zip(*training_data)
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(texts)
y = labels

# –ù–∞–≤—á–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å
model = MultinomialNB()
model.fit(X, y)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥–∏
def classify_command(command):
    command_vector = vectorizer.transform([command])
    prediction = model.predict(command_vector)
    return prediction[0]

# –ö–æ–º–∞–Ω–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def process_command(command):
    command = command.lower()
    category = classify_command(command)

    if category == "greeting":
        speak("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
    elif category == "question":
        speak("–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è!")
    elif category == "goodbye":
        speak("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    elif category == "exit":
        speak("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
        root.quit()
    elif category == "time":
        speak("–ó–∞—Ä–∞–∑ " + datetime.datetime.now().strftime("%H:%M"))
    elif category == "battery":
        battery = psutil.sensors_battery()
        if battery:
            speak(f"–ó–∞—Ä—è–¥ {int(battery.percent)} –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤")
        else:
            speak("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –∑–∞—Ä—è–¥.")
    elif "–∑–∞–ø–∞–º'—è—Ç–∞–π" in command:
        memory_data = command.replace("–∑–∞–ø–∞–º'—è—Ç–∞–π", "").strip()
        add_to_memory("user_data", memory_data)
        speak(f"–Ø –∑–∞–ø–∞–º'—è—Ç–∞–≤: {memory_data}")
    elif "—â–æ —è –∑–∞–ø–∞–º'—è—Ç–∞–≤" in command:
        remembered_data = recall_from_memory("user_data")
        speak(f"–¢–∏ –∑–∞–ø–∞–º'—è—Ç–∞–≤: {remembered_data}")
    else:
        speak("–Ø –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞—é, —è–∫ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏.")

# –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥
def handle_voice():
    recognizer = sr.Recognizer()
    mic = sr.Microphone()
    with mic as source:
        speak("–ì–æ–≤–æ—Ä–∏ –∫–æ–º–∞–Ω–¥—É")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        command = recognizer.recognize_google(audio, language="uk-UA")
        process_command(command)
    except:
        speak("–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∫–æ–º–∞–Ω–¥—É.")

# –¢–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥
def handle_text():
    command = simpledialog.askstring("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É", "–©–æ –±–∞–∂–∞—î—à?")
    if command:
        process_command(command.lower())

# GUI
root = tk.Tk()
root.title("Jarvis Assistant")
root.geometry("300x250")

tk.Label(root, text="Jarvis", font=("Arial", 24)).pack(pady=10)
tk.Button(root, text="üéô –ì–æ–ª–æ—Å–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞", font=("Arial", 14), command=handle_voice).pack(pady=10)
tk.Button(root, text="üí¨ –¢–µ–∫—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞", font=("Arial", 14), command=handle_text).pack(pady=10)
tk.Button(root, text="‚ùå –í–∏—Ö—ñ–¥", font=("Arial", 14), command=root.quit).pack(pady=10)

speak("–í—ñ—Ç–∞—é. –Ø –ù—ñ—Ä–æ.")
root.mainloop()
